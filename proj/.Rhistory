time_before_elec = numeric(0),
upper_bound = numeric(0),
lower_bound = numeric(0),
cycle = numeric(0))
for(cycle in res$cycle) {
data_jags <- data_prep(data = polls, res = res, year = cycle, anchor = F)
data_jags <- bias_priors(data_jags = data_jags, deltas = deltas, thetas = thetas)
mod_res <- run_model(data_jags = data_jags, anchor = F)
cycle_time_est <- extract_time_est(mod_res = mod_res, year = cycle, data_jags = data_jags)
all_cycle_est <- rbind(all_cycle_est, cycle_time_est)
}
#Structure
# Part 1 - Inference
# -Use final bias estimates as priors for an unanchored random walk model for each cycle
# -Plot random walk(s) against polls/results with 95% CI
#     -if 95% CI is smaller closer to the election, don't worry.
#     -if 95% CI is still large, look at the weighted SD for polls by cycle
#     -if 95% CI is still large, estimate all models by month
#     -if 95% CI is still large, add a bunch of simulated polls and see if the CI shrinks
# -Display final and in-cycle EDay estimates against actual two-way popular vote and share of seats in a table.
# -Use a normal regression to identify relationship between final estimate and final seats.
# -add a table of contents
# -make sure plots are correctly sized
# -Make flextables look nice
# -put math/specs of model in appendix a
#Part 2
# -Use final bias estimates as priors for an unanchored random walk model
# -Use regression from part 1 to estimate #seats won and use sd of model to estimate p(take back the house today) and p(take back the house in X weeks)
# -Plot random walk against polls with 95% CI
# -Apply uniform swing from 2016 estimate to 2016 results estimate share of vote for each district
# -Use SDs to calculate tipping point districts
# -Use SDs to calculate p(victory) in tipping point districts
# -put math/specs of model in appendix a
# -put code in appendix b
ggplot(data=all_cycle_est, aes(x=time_before_elec, y=iter_mean)) +
geom_point(data=polls, aes(x=week, y=twoway, size=sqrt(n_size)), alpha=0.2) +
geom_ribbon(aes(ymin=lower_bound,ymax=upper_bound), alpha = 0.5) +
geom_hline(data=res, aes(yintercept = twoway_vote), linetype="dashed") +
geom_line(color = "blue") +
theme_bw() +
facet_wrap(~cycle) +
scale_x_reverse(name = "Weeks Before Election") +
scale_y_continuous(name = "Democratic Two-way Vote Share", labels=scales::percent) +
guides(size=F, color = F)
ggplot(data=all_cycle_est, aes(x=time_before_elec, y=iter_mean)) +
geom_point(data=polls, aes(x=week, y=twoway, size=sqrt(n_size)), alpha=0.2) +
geom_ribbon(aes(ymin=lower_bound,ymax=upper_bound), alpha = 0.5) +
geom_hline(data=res, aes(yintercept = twoway_vote), linetype="dashed") +
geom_line(color = "blue") +
theme_bw() +
facet_wrap(~cycle) +
scale_x_reverse(name = "Weeks Before Election") +
scale_y_continuous(name = "Democratic Two-way Vote Share", labels=scales::percent) +
guides(size=F, color = F)
time_series_with_trend <- ggplot(data=all_cycle_est, aes(x=time_before_elec, y=iter_mean)) +
geom_point(data=polls, aes(x=week, y=twoway, size=sqrt(n_size)), alpha=0.2) +
geom_ribbon(aes(ymin=lower_bound,ymax=upper_bound), alpha = 0.5) +
geom_hline(data=res, aes(yintercept = twoway_vote), linetype="dashed") +
geom_line(color = "blue") +
theme_bw() +
facet_wrap(~cycle) +
scale_x_reverse(name = "Weeks Before Election") +
scale_y_continuous(name = "Democratic Two-way Vote Share", labels=scales::percent) +
guides(size=F, color = F)
ggsave(filename = "figures/time_series_with_trend.png", plot = time_series_with_trend, width = 8, height = 4, units = "in")
#Estimate week-by-week movement using past pollster and universe bias
all_cycle_est <- data.frame(iter_mean = numeric(0),
iter_sigma2 = numeric(0),
time_before_elec = numeric(0),
upper_bound = numeric(0),
lower_bound = numeric(0),
cycle = numeric(0))
for(cycle in res$cycle) {
data_jags <- data_prep(data = polls, res = res, year = cycle, anchor = F)
data_jags <- bias_priors(data_jags = data_jags, deltas = deltas, thetas = thetas)
mod_res <- run_model(data_jags = data_jags, params = c("xi"), anchor = F)
cycle_time_est <- extract_time_est(mod_res = mod_res, year = cycle, data_jags = data_jags)
all_cycle_est <- rbind(all_cycle_est, cycle_time_est)
}
ggplot(data=all_cycle_est, aes(x=time_before_elec, y=iter_mean)) +
geom_point(data=polls, aes(x=week, y=twoway, size=sqrt(n_size)), alpha=0.2) +
geom_ribbon(aes(ymin=lower_bound,ymax=upper_bound), alpha = 0.5) +
geom_hline(data=res, aes(yintercept = twoway_vote), linetype="dashed") +
geom_line(color = "blue") +
theme_bw() +
facet_wrap(~cycle) +
scale_x_reverse(name = "Weeks Before Election") +
scale_y_continuous(name = "Democratic Two-way Vote Share", labels=scales::percent) +
guides(size=F, color = F)
time_series_with_trend <- ggplot(data=all_cycle_est, aes(x=time_before_elec, y=iter_mean)) +
geom_point(data=polls, aes(x=week, y=twoway, size=sqrt(n_size)), alpha=0.2) +
geom_ribbon(aes(ymin=lower_bound,ymax=upper_bound), alpha = 0.5) +
geom_hline(data=res, aes(yintercept = twoway_vote), linetype="dashed") +
geom_line(color = "blue") +
theme_bw() +
facet_wrap(~cycle) +
scale_x_reverse(name = "Weeks Before Election") +
scale_y_continuous(name = "Democratic Two-way Vote Share", labels=scales::percent) +
guides(size=F, color = F)
ggsave(filename = "figures/time_series_with_trend.png", plot = time_series_with_trend, width = 8, height = 4, units = "in")
all_cycle_est %>% filter(time_before_elec = 0)
all_cycle_est %>% filter(time_before_elec == 0)
View(avgs)
all_cycle_est %>%
filter(time_before_elec == 0) %>%
inner_join(avgs, by = "cycle")
tbl <- all_cycle_est %>%
filter(time_before_elec == 0) %>%
inner_join(avgs, by = "cycle") %>%
mutate(`Bayesian Forecast` = iter_mean,
`Final Polling Avg` = avg,
`Popular Vote` = twoway_vote,
`Forecast Error` = twoway_vote - iter_mean,
`Polling Avg Error` = twoway_vote - avg) %>%
select(c(`Bayesian Forecast`, `Final Polling Avg`, `Popular Vote`, `Forecast Error`, `Polling Avg Error`))
View(thetas)
View(tbl)
tbl <- all_cycle_est %>%
filter(time_before_elec == 0) %>%
inner_join(avgs, by = "cycle") %>%
mutate(`Bayesian Forecast` = iter_mean,
`Final Polling Avg` = avg,
`Popular Vote` = twoway_vote,
`Forecast Error` = twoway_vote - iter_mean,
`Polling Avg Error` = twoway_vote - avg,
Cycle = cycle) %>%
select(c(Cycle, `Bayesian Forecast`, `Final Polling Avg`, `Popular Vote`, `Forecast Error`, `Polling Avg Error`))
View(tbl)
mean(tbl$`Forecast Error`)
mean(tbl$`Polling Avg Error`)
mean(abs(tbl$`Polling Avg Error`))
mean(abs(tbl$`Polling Avg Error`))
mean(abs(tbl$`Forecast Error`))
tbl <- all_cycle_est %>%
filter(time_before_elec == 0) %>%
inner_join(avgs, by = "cycle") %>%
mutate(`Bayesian Forecast` = iter_mean,
`Popular Vote` = twoway_vote,
`Seat Share` = twoway_seat,
`Forecast Error` = twoway_vote - iter_mean,
Cycle = cycle) %>%
select(c(Cycle, `Bayesian Forecast`, `Popular Vote`, `Seat Share`, `Forecast Error`))
View(tbl)
scales::percent(tbl$`Forecast Error`)
tbl <- all_cycle_est %>%
filter(time_before_elec == 0) %>%
inner_join(avgs, by = "cycle") %>%
mutate(`Forecast` = scales::percent(iter_mean),
`Popular Vote` = scales::percent(twoway_vote),
`Seat Share` = scales::percent(twoway_seat),
`Forecast Error` = scales::percent(twoway_vote - iter_mean),
Cycle = cycle) %>%
select(c(Cycle, `Forecast`, `Popular Vote`, `Seat Share`, `Forecast Error`))
View(tbl)
tbl <- all_cycle_est %>%
filter(time_before_elec == 0) %>%
inner_join(avgs, by = "cycle") %>%
mutate(`Forecast` = scales::percent(round(iter_mean,3)),
`Popular Vote` = scales::percent(round(twoway_vote,3)),
`Seat Share` = scales::percent(round(twoway_seat,3)),
`Forecast Error` = scales::percent(round(twoway_vote - iter_mean,3)),
Cycle = cycle) %>%
select(c(Cycle, `Forecast`, `Popular Vote`, `Seat Share`, `Forecast Error`))
View(tbl)
install.packages("flextable")
library(flextable)
install.packages("flextable")
library(flextable)
flextable(tbl)
flextable::flextable(tbl)
install.packages("ReportRs")
library(ReportRs)
summary(glm(twoway_seat ~ iter_mean, data = all_cycle_est %>%
filter(time_before_elec == 0) %>%
inner_join(avgs, by = "cycle"), family = "binomial"))
summary(glm(twoway_seat ~ iter_mean, data = all_cycle_est %>%
filter(time_before_elec == 0) %>%
inner_join(avgs, by = "cycle")))
summary(glm(twoway_vote ~ iter_mean, data = all_cycle_est %>%
filter(time_before_elec == 0) %>%
inner_join(avgs, by = "cycle")))
install.packages("ReportRs")
final_ests <- all_cycle_est %>%
filter(time_before_elec == 0) %>%
inner_join(avgs, by = "cycle")
ggplot(final_ests, aes(x = iter_mean, y = twoway_seat)) +
geom_point() +
geom_errorbar(aes(ymin=lower_bound, ymax=upper_bound)) +
coord_flip() +
theme_bw() +
scale_y_continuous(name = "Election Forecast", limits = c(0.25, 0.75), labels = scales::percent) +
scale_x_continuous(name = "Observed Seats Won", limits = c(0.4, 0.6), labels = scales::percent) +
stat_smooth(method = "lm")
geom_line(data = lobf, aes(y = x, x = x), color = "red", linetype = "dashed")
View(final_ests)
ggplot(final_ests, aes(x = twoway_seat, y = iter_mean)) +
geom_point() +
geom_errorbar(aes(ymin=lower_bound, ymax=upper_bound)) +
coord_flip() +
theme_bw() +
scale_y_continuous(name = "Election Forecast", limits = c(0.25, 0.75), labels = scales::percent) +
scale_x_continuous(name = "Observed Seats Won", limits = c(0.4, 0.6), labels = scales::percent) +
stat_smooth(method = "lm")
ggplot(final_ests, aes(x = twoway_seat, y = iter_mean)) +
geom_point() +
geom_errorbar(aes(ymin=lower_bound, ymax=upper_bound)) +
coord_flip() +
theme_bw() +
scale_y_continuous(name = "Election Forecast", limits = c(0.4, 0.65), labels = scales::percent) +
scale_x_continuous(name = "Observed Seats Won", limits = c(0.4, 0.6), labels = scales::percent) +
stat_smooth(method = "lm")
ggplot(final_ests, aes(x = twoway_seat, y = iter_mean)) +
geom_point() +
geom_errorbar(aes(ymin=lower_bound, ymax=upper_bound)) +
coord_flip() +
theme_bw() +
scale_y_continuous(name = "Election Forecast", limits = c(0.4, 0.65), labels = scales::percent) +
scale_x_continuous(name = "Observed Seats Won", limits = c(0.4, 0.6), labels = scales::percent) +
stat_smooth(method = "lm") +
geom_line(data = lobf, aes(y = seq(0.25, 0.75, 0.001), x = seq(0.25, 0.75, 0.001)), color = "red", linetype = "dashed")
ggplot(final_ests, aes(x = twoway_seat, y = iter_mean)) +
geom_point() +
geom_errorbar(aes(ymin=lower_bound, ymax=upper_bound)) +
coord_flip() +
theme_bw() +
scale_y_continuous(name = "Election Forecast", limits = c(0.4, 0.65), labels = scales::percent) +
scale_x_continuous(name = "Observed Seats Won", limits = c(0.4, 0.6), labels = scales::percent) +
stat_smooth(method = "lm") +
geom_line(aes(y = seq(0.25, 0.75, 0.001), x = seq(0.25, 0.75, 0.001)), color = "red", linetype = "dashed")
ggplot(final_ests, aes(x = twoway_seat, y = iter_mean)) +
geom_point() +
geom_errorbar(aes(ymin=lower_bound, ymax=upper_bound)) +
coord_flip() +
theme_bw() +
scale_y_continuous(name = "Election Forecast", limits = c(0.4, 0.65), labels = scales::percent) +
scale_x_continuous(name = "Observed Seats Won", limits = c(0.4, 0.6), labels = scales::percent) +
stat_smooth(method = "lm") +
geom_line(data = data.frame(x = seq(0.25, 0.75, 0.001)), aes(y = x, x = x), color = "red", linetype = "dashed")
lm_fit <- ggplot(final_ests, aes(x = twoway_seat, y = iter_mean)) +
geom_point() +
geom_errorbar(aes(ymin=lower_bound, ymax=upper_bound)) +
coord_flip() +
theme_bw() +
scale_y_continuous(name = "Election Forecast", limits = c(0.4, 0.65), labels = scales::percent) +
scale_x_continuous(name = "Observed Seats Won", limits = c(0.4, 0.6), labels = scales::percent) +
stat_smooth(method = "lm")
ggsave(filename = "figures/final_est_vs_seats.png", plot = lm_fit, width = 3, height = 3, units = "in")
summary(glm(twoway_seat ~ iter_mean, data = all_cycle_est %>%
filter(time_before_elec == 0) %>%
inner_join(avgs, by = "cycle")))
-0.2363+0.54*1.3922
0.515488*435
sqrt(0.0002431224)
#Structure
# Part 1 - Inference
# -add a table of contents
# -make sure plots are correctly sized
# -Make flextables look nice
# -put math/specs of model in appendix a
#Part 2
# -Use final bias estimates as priors for an unanchored random walk model
# -Use regression from part 1 to estimate #seats won and use sd of model to estimate p(take back the house today) and p(take back the house in X weeks)
# -Plot random walk against polls with 95% CI
# -Apply uniform swing from 2016 estimate to 2016 results estimate share of vote for each district
# -Use SDs to calculate tipping point districts
# -Use SDs to calculate p(victory) in tipping point districts
# -put math/specs of model in appendix a
# -put code in appendix b
lm_obj <- glm(twoway_seat ~ iter_mean, data = all_cycle_est %>%
filter(time_before_elec == 0) %>%
inner_join(avgs, by = "cycle"))
summary(lm_obj)
coefficients(lm_obj)
as.data.frame(coefficients(lm_obj))
coefs <- as.data.frame(coefficients(lm_obj))
View(coefs)
#Structure
# Part 1 - Inference
# -make sure plots are correctly sized
# -Make flextables look nice
# -put math/specs of model in appendix a
#Part 2
# -Use final bias estimates as priors for an unanchored random walk model
# -Use regression from part 1 to estimate #seats won and use sd of model to estimate p(take back the house today) and p(take back the house in X weeks)
# -Plot random walk against polls with 95% CI
# -Apply uniform swing from 2016 estimate to 2016 results estimate share of vote for each district
# -Use SDs to calculate tipping point districts
# -Use SDs to calculate p(victory) in tipping point districts
# -put math/specs of model in appendix a
# -put code in appendix b
knitr::include_graphics("figures/data_breakdown.png")
knitr::include_graphics("figures/data_breakdown.png")
knitr::include_graphics("figures/data_breakdown.png")
knitr::include_graphics("figures/data_breakdown.png")
knitr::include_graphics("figures/data_breakdown.png")
knitr::include_graphics("figures/data_breakdown.png")
knitr::include_graphics("figures/time_series_with_trend.png")
write_csv(tbl, "data/final_est_comparison.csv")
View(all_cycle_est)
mean(0.0009964905, 0.0004740970, 0.0002320703, 0.0002431224, 0.0002004884, 0.0004418153)
sqrt(0.0009964905)
mean(0.0004304877, 0.0002786238, 0.0003975870, 0.0001720913, 0.0002156835, 0.0005752826)
sqrt(0.0004304877)
cycle = 2006
data_jags <- data_prep(data = polls, res = res, year = cycle, anchor = F)
data_jags <- bias_priors(data_jags = data_jags, deltas = deltas, thetas = thetas)
mod_res <- run_model(data_jags = data_jags,
params = c("xi", "omega"),
anchor = F,
chains = 4,
thining = 10,
burnin = 10000,
iter = 1000000)
summary(mod_res)
omegas <- c(0.01695)
cycle = 2008
data_jags <- data_prep(data = polls, res = res, year = cycle, anchor = F)
data_jags <- bias_priors(data_jags = data_jags, deltas = deltas, thetas = thetas)
mod_res <- run_model(data_jags = data_jags,
params = c("xi", "omega"),
anchor = F,
chains = 4,
thining = 10,
burnin = 10000,
iter = 1000000)
summary(mod_res)
omega <- c(omega, 0.007583)
omegas <- c(omegas, 0.007583)
cycle = 2010
data_jags <- data_prep(data = polls, res = res, year = cycle, anchor = F)
data_jags <- bias_priors(data_jags = data_jags, deltas = deltas, thetas = thetas)
mod_res <- run_model(data_jags = data_jags,
params = c("xi", "omega"),
anchor = F,
chains = 4,
thining = 10,
burnin = 10000,
iter = 1000000)
tbl <- final_ests %>%
mutate(`Forecast` = scales::percent(round(iter_mean,3)),
`Popular Vote` = scales::percent(round(twoway_vote,3)),
`Seat Share` = scales::percent(round(twoway_seat,3)),
`Forecast Error` = paste(round(100*(twoway_vote - iter_mean),1),"pp"),
Cycle = cycle) %>%
select(c(Cycle, `Forecast`, `Popular Vote`, `Seat Share`, `Forecast Error`))
View(tbl)
tbl <- final_ests %>%
mutate(`Forecast` = scales::percent(round(iter_mean,3)),
`Popular Vote` = scales::percent(round(twoway_vote,3)),
`Seat Share` = scales::percent(round(twoway_seat,3)),
`Forecast Error` = paste0(round(100*(twoway_vote - iter_mean),1),"pp"),
Cycle = cycle) %>%
select(c(Cycle, `Forecast`, `Popular Vote`, `Seat Share`, `Forecast Error`))
write_csv(tbl, "data/final_est_comparison.csv")
summary(mod_res)
omegas <- c(omegas, 0.004041)
tbl_display <- read_csv("data/final_est_comparison.csv")
tbl_display
cycle = 2012
data_jags <- data_prep(data = polls, res = res, year = cycle, anchor = F)
data_jags <- bias_priors(data_jags = data_jags, deltas = deltas, thetas = thetas)
mod_res <- run_model(data_jags = data_jags,
params = c("xi", "omega"),
anchor = F,
chains = 4,
thining = 10,
burnin = 10000,
iter = 1000000)
summary(mod_res)
omegas <- c(omegas, 0.003297)
cycle = 2014
#Structure
# Part 1 - Inference
# -Make flextables look nice
# -put math/specs of model in appendix a
#Part 2
# -Use final bias estimates as priors for an unanchored random walk model
# -Use regression from part 1 to estimate #seats won and use sd of model to estimate p(take back the house today) and p(take back the house in X weeks)
# -Plot random walk against polls with 95% CI
# -Apply uniform swing from 2016 estimate to 2016 results estimate share of vote for each district
# -Use SDs to calculate tipping point districts
# -Use SDs to calculate p(victory) in tipping point districts
# -put math/specs of model in appendix a
# -put code in appendix b
data_jags <- data_prep(data = polls, res = res, year = cycle, anchor = F)
data_jags <- bias_priors(data_jags = data_jags, deltas = deltas, thetas = thetas)
mod_res <- run_model(data_jags = data_jags,
params = c("xi", "omega"),
anchor = F,
chains = 4,
thining = 10,
burnin = 10000,
iter = 1000000)
summary(mod_res)
omegas <- c(omegas)
omegas <- c(omegas, 0.00271)
mean(omegas)
mean(omegas)*1.96
cycle = 2016
data_jags <- data_prep(data = polls, res = res, year = cycle, anchor = F)
data_jags <- bias_priors(data_jags = data_jags, deltas = deltas, thetas = thetas)
mod_res <- run_model(data_jags = data_jags,
params = c("xi", "omega"),
anchor = F,
chains = 4,
thining = 10,
burnin = 10000,
iter = 1000000)
summary(mod_res)
omegas <- c(omegas, 0.007318)
mean(omegas)
mean(omegas)*1.96
20/1.96
.20/1.96
2sigma2 = 0.2
sigma2 = 0.2/1.96
sigma = 0.2/1.96
sigma
sigma2 = sigma^2
sigma
sigma2
two_sigma = 0.2
sigma2 = (two_sigma/1.96)^2
sigma2
lm_obj <- glm(twoway_seat ~ iter_mean, data = all_cycle_est %>%
filter(time_before_elec == 0) %>%
inner_join(avgs, by = "cycle"))
summary(lm_obj)
lm_obj <- lm(twoway_seat ~ iter_mean, data = all_cycle_est %>%
filter(time_before_elec == 0) %>%
inner_join(avgs, by = "cycle"))
summary(lm_obj)
-0.2363 + 1.3922*0.55
-0.2363 + 1.3922*0.60
-0.2363 + 1.3922*0.50
ggplot(final_ests, aes(x = twoway_seat, y = iter_mean)) +
geom_point() +
geom_errorbar(aes(ymin=lower_bound, ymax=upper_bound)) +
coord_flip() +
theme_bw() +
scale_y_continuous(name = "Election Forecast", limits = c(0.4, 0.65), labels = scales::percent) +
scale_x_continuous(name = "Observed Seats Won", limits = c(0.4, 0.6), labels = scales::percent) +
stat_smooth(method = "smooth.spline")
ggplot(final_ests, aes(x = twoway_seat, y = iter_mean)) +
geom_point() +
geom_errorbar(aes(ymin=lower_bound, ymax=upper_bound)) +
coord_flip() +
theme_bw() +
scale_y_continuous(name = "Election Forecast", limits = c(0.4, 0.65), labels = scales::percent) +
scale_x_continuous(name = "Observed Seats Won", limits = c(0.4, 0.6), labels = scales::percent) +
stat_smooth()
ggplot(final_ests, aes(x = twoway_seat, y = iter_mean)) +
geom_point() +
geom_errorbar(aes(ymin=lower_bound, ymax=upper_bound)) +
coord_flip() +
theme_bw() +
scale_y_continuous(name = "Election Forecast", limits = c(0.4, 0.65), labels = scales::percent) +
scale_x_continuous(name = "Observed Seats Won", limits = c(0.4, 0.6), labels = scales::percent) +
stat_smooth(method = "loess")
ggplot(final_ests, aes(x = twoway_seat, y = iter_mean)) +
geom_point() +
geom_errorbar(aes(ymin=lower_bound, ymax=upper_bound)) +
coord_flip() +
theme_bw() +
scale_y_continuous(name = "Election Forecast", limits = c(0.4, 0.65), labels = scales::percent) +
scale_x_continuous(name = "Observed Seats Won", limits = c(0.4, 0.6), labels = scales::percent) +
stat_smooth(method = "loess")
ggplot(final_ests, aes(x = twoway_seat, y = iter_mean)) +
geom_point() +
geom_errorbar(aes(ymin=lower_bound, ymax=upper_bound)) +
coord_flip() +
theme_bw() +
scale_y_continuous(name = "Election Forecast", limits = c(0.4, 0.65), labels = scales::percent) +
scale_x_continuous(name = "Observed Seats Won", limits = c(0.4, 0.6), labels = scales::percent) +
stat_smooth(method = "lm")
coefs <- as.data.frame(coefficients(lm_obj))
x <- seq(0.5, 0.65, 0.001)
lobf <- data.frame(line = coefs[1,1] + coefs[2,1]*x,
x = x)
ggplot(final_ests, aes(x = twoway_seat, y = iter_mean)) +
geom_point() +
geom_errorbar(aes(ymin=lower_bound, ymax=upper_bound)) +
coord_flip() +
theme_bw() +
scale_y_continuous(name = "Election Forecast", limits = c(0.4, 0.65), labels = scales::percent) +
scale_x_continuous(name = "Observed Seats Won", limits = c(0.4, 0.6), labels = scales::percent) +
geom_line(data = lobf, aes(y = x, x = line), color = "blue", linetype = "dashed")
x <- seq(0.4, 0.65, 0.001)
lobf <- data.frame(line = coefs[1,1] + coefs[2,1]*x,
x = x)
ggplot(final_ests, aes(x = twoway_seat, y = iter_mean)) +
geom_point() +
geom_errorbar(aes(ymin=lower_bound, ymax=upper_bound)) +
coord_flip() +
theme_bw() +
scale_y_continuous(name = "Election Forecast", limits = c(0.4, 0.65), labels = scales::percent) +
scale_x_continuous(name = "Observed Seats Won", limits = c(0.4, 0.6), labels = scales::percent) +
geom_line(data = lobf, aes(y = x, x = line), color = "blue", linetype = "dashed")
x <- seq(0.4, 0.6, 0.001)
lobf <- data.frame(line = coefs[1,1] + coefs[2,1]*x,
x = x)
lm_fit <- ggplot(final_ests, aes(x = twoway_seat, y = iter_mean)) +
geom_point() +
geom_errorbar(aes(ymin=lower_bound, ymax=upper_bound)) +
coord_flip() +
theme_bw() +
scale_y_continuous(name = "Election Forecast", limits = c(0.4, 0.65), labels = scales::percent) +
scale_x_continuous(name = "Observed Seats Won", limits = c(0.4, 0.6), labels = scales::percent) +
geom_line(data = lobf, aes(y = x, x = line), color = "blue", linetype = "dashed")
ggsave(filename = "figures/final_est_vs_seats.png", plot = lm_fit, width = 3, height = 3, units = "in")
summary(lm_obj)
knitr::include_graphics("figures/final_est_vs_seats.png")
