ggplot( aes(x = new_seats, fill =  factor(new_seats_wins))) +
geom_histogram() +
theme_bw()+
guides(fill= F)
seats_df <- data.frame(new_seats = new_seats, new_seats_wins = ifelse(new_seats > 217, 1, 0))
ggplot(seats_df, aes(x = new_seats, fill =  factor(new_seats_wins))) +
geom_histogram() +
theme_bw()+
guides(fill= F)
ggplot(seats_df, aes(x = new_seats, fill =  factor(new_seats_wins))) +
geom_bar(aes(y = (..count..)/sum(..count..))) +
theme_bw()+
guides(fill= F)
ggplot(seats_df, aes(x = new_seats, fill =  factor(new_seats_wins))) +
geom_bar(aes(y = (..count..)/sum(..count..))) +
theme_bw()+
guides(fill= F) +
scale_y_continuous(labels = scales::percent, name = "% of Simulations") +
xlab("# of Democratic Seats")  +
geom_vline(xintercept = 218, size = 1, linetype = "dashed")
ggplot(seats_df, aes(x = new_seats, fill =  factor(new_seats_wins))) +
geom_bar(aes(y = (..count..)/sum(..count..))) +
theme_bw()+
guides(fill= F) +
scale_y_continuous(labels = scales::percent, name = "% of Simulations") +
xlab("# of Democratic Seats")  +
geom_vline(xintercept = 218, size = 1, linetype = "dashed", alpha = 0.3)
ggplot(seats_df, aes(x = new_seats, fill =  factor(new_seats_wins))) +
geom_bar(aes(y = (..count..)/sum(..count..))) +
theme_bw()+
guides(fill= F) +
scale_y_continuous(labels = scales::percent, name = "% of Simulations") +
xlab("# of Democratic Seats")
seats_df <- data.frame(new_seats = new_seats, new_seats_wins = ifelse(new_seats > 217, 1, 0)) %>%
filter(new_seats < 435, new_seats > 0)
ggplot(seats_df, aes(x = new_seats, fill =  factor(new_seats_wins))) +
geom_bar(aes(y = (..count..)/sum(..count..))) +
theme_bw()+
guides(fill= F) +
scale_y_continuous(labels = scales::percent, name = "% of Simulations") +
xlab("# of Democratic Seats")
ggplot(seats_df, aes(x = new_seats, fill =  factor(new_seats_wins))) +
geom_bar(aes(y = (..count..)/sum(..count..))) +
theme_bw()+
guides(fill= F) +
scale_y_continuous(labels = scales::percent, name = "% of Simulations") +
xlab("# of Democratic Seats") +
scale_fill_manual(values = c("#3C3F76", #A83022))
k
l)))
ggplot(seats_df, aes(x = new_seats, fill =  factor(new_seats_wins))) +
geom_bar(aes(y = (..count..)/sum(..count..))) +
theme_bw()+
guides(fill= F) +
scale_y_continuous(labels = scales::percent, name = "% of Simulations") +
xlab("# of Democratic Seats") +
scale_fill_manual(values = c("#3C3F76", "#A83022"))
ggplot(seats_df, aes(x = new_seats, fill =  factor(new_seats_wins))) +
geom_bar(aes(y = (..count..)/sum(..count..))) +
theme_bw()+
guides(fill= F) +
scale_y_continuous(labels = scales::percent, name = "% of Simulations") +
xlab("# of Democratic Seats") +
scale_fill_manual(values = c("#A83022", "#3596DD"))
hist1 <- ggplot(house_2016, aes(x = dist_forecast, fill =  factor(win))) +
geom_histogram() +
theme_bw()+
guides(fill= F) +
scale_x_continuous(labels = scales::percent, name = "Forecasted Support") +
ylab("# of Districts")  +
scale_fill_manual(values = c("#A83022", "#3596DD"))
hist2 <- ggplot(house_2016, aes(x = prob_victory, fill =  factor(win))) +
geom_histogram() +
theme_bw()+
guides(fill= F) +
scale_x_continuous(labels = scales::percent, name = "Probability of Victory") +
ylab("# of Districts")  +
scale_fill_manual(values = c("#A83022", "#3596DD"))
hist3 <- ggplot(seats_df, aes(x = new_seats, fill =  factor(new_seats_wins))) +
geom_bar(aes(y = (..count..)/sum(..count..))) +
theme_bw()+
guides(fill= F) +
scale_y_continuous(labels = scales::percent, name = "% of Simulations") +
xlab("# of Democratic Seats")  +
scale_fill_manual(values = c("#A83022", "#3596DD"))
ggsave(filename = "figures/2018_histograms.png", plot = plot_grid(hist1, hist2, hist3, nrow = 1), width = 8, height = 4, units = "in")
house_2016 <- read.csv("data/house_general_election_2016.csv") %>%
filter(individual_party %in% c("republican", "democrat")) %>%
group_by(state, geo_name, individual_party) %>%
mutate(vote_pct = ifelse(is.na(vote_pct), 100.0, vote_pct)) %>%
summarise(vote_pct = sum(vote_pct)) %>%
ungroup() %>%
spread(key=individual_party, value = vote_pct, fill = 0) %>%
mutate(twoway_vote = democrat/(democrat+republican))
nat_swing <- mean(final_forecast_posterior) -
as.numeric(substr(past_final_est$Popular.Vote[past_final_est$Cycle == 2016],1,4))/100
house_2016$dist_forecast <- house_2016$twoway_vote + nat_swing
house_2016$dist_lb <- house_2016$twoway_vote - 1.96*(as.numeric(omega)*min(cycle_time_est$time_before_elec))
house_2016$dist_ub <- house_2016$twoway_vote + 1.96*(as.numeric(omega)*min(cycle_time_est$time_before_elec))
house_2016$prob_victory <- 0
house_2016$cd <- ""
for (i in 1:nrow(house_2016)) {
dist_mean <- rnorm(100000, mean = house_2016$dist_forecast[i], sd = (as.numeric(omega)*min(cycle_time_est$time_before_elec)))
house_2016$prob_victory[i] <- mean(dist_mean > 0.5)
house_2016$cd[i] <- paste(state.abb[grep(house_2016$state[i], state.name)], strsplit(as.character(house_2016$geo_name[i])," ")[[1]], sep = " - ")
}
house_2016$strat_import <- ifelse(house_2016$prob_victory < 0.6 & house_2016$prob_victory > 0.4, 1, 0)
house_2016 <- house_2016 %>%
left_join(tp_dists, by  = c("geo_name" = "dist", "state" = "state")) %>%
mutate_each(funs(replace(., which(is.na(.)), 0))) %>%
mutate(win = ifelse(dist_forecast > 0.5, 1, 0),
class = ifelse(prob_victory > 0.8, 1,
ifelse(prob_victory > 0.6, 0.75,
ifelse(prob_victory > 0.4, 1, 0.5,
ifelse(prob_victory > 0.2, 1,0.25, 0)))),
dist_forecast = ifelse(dist_forecast > 1, 1, dist_forecast))
house_2016 <- house_2016 %>%
left_join(tp_dists, by  = c("geo_name" = "dist", "state" = "state")) %>%
mutate_each(funs(replace(., which(is.na(.)), 0))) %>%
mutate(win = ifelse(dist_forecast > 0.5, 1, 0),
class = ifelse(prob_victory > 0.8, 1,
ifelse(prob_victory > 0.6, 0.75,
ifelse(prob_victory > 0.4, 0.5,
ifelse(prob_victory > 0.2, 0.25, 0)))),
dist_forecast = ifelse(dist_forecast > 1, 1, dist_forecast))
?mid_color
ggplot(house_2016, aes(x = prob_victory, fill =  factor(class))) +
geom_histogram() +
theme_bw()+
guides(fill= F) +
scale_x_continuous(labels = scales::percent, name = "Probability of Victory") +
ylab("# of Districts")  +
scale_fill_manual(values = c("#A83022", "#BC5B51", "#64288C", "#3596DD", "#1F2F6A"))
ggplot(house_2016, aes(x = prob_victory, fill =  factor(win))) +
geom_histogram() +
theme_bw()+
guides(fill= F) +
scale_x_continuous(labels = scales::percent, name = "Probability of Victory") +
ylab("# of Districts")
ggplot(house_2016, aes(x = prob_victory, fill =  factor(class))) +
geom_histogram() +
theme_bw()+
guides(fill= F) +
scale_x_continuous(labels = scales::percent, name = "Probability of Victory") +
ylab("# of Districts")  +
scale_fill_manual(values = c("#A83022", "#BC5B51", "#64288C", "#3596DD", "#1F2F6A"))
ggplot(house_2016, aes(x = prob_victory, fill =  factor(class))) +
geom_histogram() +
theme_bw()+
guides(fill= F) +
scale_x_continuous(labels = scales::percent, name = "Probability of Victory") +
ylab("# of Districts")  +
scale_fill_manual(values = c("#A83022", "#BC5B51", "#64288C", "#3596DD", "#1F2F6A"))
hist1 <- ggplot(house_2016, aes(x = dist_forecast, fill =  factor(win))) +
geom_histogram() +
theme_bw()+
guides(fill= F) +
scale_x_continuous(labels = scales::percent, name = "Forecasted Support") +
ylab("# of Districts")  +
scale_fill_manual(values = c("#A83022", "#3596DD"))
hist2 <- ggplot(house_2016, aes(x = prob_victory, fill =  factor(class))) +
geom_histogram() +
theme_bw()+
guides(fill= F) +
scale_x_continuous(labels = scales::percent, name = "Probability of Victory") +
ylab("# of Districts")  +
scale_fill_manual(values = c("#A83022", "#BC5B51", "#64288C", "#3596DD", "#1F2F6A"))
hist3 <- ggplot(seats_df, aes(x = new_seats, fill =  factor(new_seats_wins))) +
geom_bar(aes(y = (..count..)/sum(..count..))) +
theme_bw()+
guides(fill= F) +
scale_y_continuous(labels = scales::percent, name = "% of Simulations") +
xlab("# of Democratic Seats")  +
scale_fill_manual(values = c("#A83022", "#3596DD"))
ggsave(filename = "figures/2018_histograms.png", plot = plot_grid(hist1, hist2, hist3, nrow = 1), width = 8, height = 4, units = "in")
library(ggplot2)
library(tidyverse)
library(rjags)
library(cowplot)
library(flextable)
source("forecasting_functions.R")
set.seed(102)
scipen=9
pollster_lkup <- read.csv("data/pollster_lkup.csv")
deltas <- read.csv("data/final_pollster_bias_ests.csv")
thetas <- read.csv("data/final_universe_bias_ests.csv")
coefs <- read.csv("data/forecast_seats_coefs.csv")
past_final_est <- read.csv("data/final_est_comparison.csv")
house_2016 <- read.csv("data/house_general_election_2016.csv") %>%
filter(individual_party %in% c("republican", "democrat")) %>%
group_by(state, geo_name, individual_party) %>%
mutate(vote_pct = ifelse(is.na(vote_pct), 100.0, vote_pct)) %>%
summarise(vote_pct = sum(vote_pct)) %>%
ungroup() %>%
spread(key=individual_party, value = vote_pct, fill = 0) %>%
mutate(twoway_vote = democrat/(democrat+republican))
polls <- read.csv("data/2018_polling.csv") %>%
filter(pollster %in% pollster_lkup$pollster) %>%
mutate(twoway = dem/(dem+rep)) %>%
mutate(week = round(as.numeric((as.Date(as.character("11/6/18"),  format="%m/%d/%y") -
as.Date(as.character(end_date),  format="%m/%d/%y")) +
(as.Date(as.character(end_date),  format="%m/%d/%y") -
as.Date(as.character(start_date),  format="%m/%d/%y"))/2)/7),
n_size = as.numeric(as.character(n_size)))
polling_summary <- polls %>%
group_by(pollster) %>%
summarise(`Total N-Size` = sum(n_size),
`# of Polls` = n()) %>%
arrange(desc(`Total N-Size`)) %>%
inner_join(pollster_lkup, by = "pollster") %>%
mutate(pollster_raw = factor(pollster_raw, levels = pollster_raw[order(`Total N-Size`)]))
polling_summary_ft <- polling_summary %>%
mutate(nsize = as.character(`Total N-Size`),
polls = `# of Polls`) %>%
select(pollster_raw, nsize, polls)
FT1 <- flextable(polling_summary_ft)
FT1 <- set_header_labels(FT1, pollster_raw = "Pollster", nsize = "Total N-Size", polls = "# of Polls")
FT1 <- theme_zebra(x = FT1, odd_header = "#CFCFCF", odd_body = "#EFEFEF",
even_header = "transparent", even_body = "transparent")
FT1 <- align(x = FT1, j = 1, align = "left", part = "all")
FT1 <- align(x = FT1, j = 2:3, align = "center", part = "all")
FT1 <- bold(x = FT1, bold = TRUE, part = "header")
FT1
#Plots for above
x1 <- ggplot(data = (polling_summary[1:5,]), aes(y = `# of Polls`, x = pollster_raw)) +
geom_bar(stat = 'identity') +
coord_flip() +
theme_bw() +
xlab("")
x2 <- ggplot(data = (polling_summary[1:5,]), aes(y = `Total N-Size`, x = pollster_raw)) +
geom_bar(stat = 'identity') +
coord_flip() +
theme_bw() +
xlab("") +
theme(axis.text.y = element_blank())
ggsave(filename = "figures/2018_data_breakdown.png", plot = plot_grid(x1, x2, nrow = 1), width = 8, height = 4, units = "in")
data_jags <- data_prep(data = polls, res = res, year = 2018, anchor = F)
data_jags <- bias_priors(data_jags = data_jags, deltas = deltas, thetas = thetas, anchor = F)
convergence_2018 <- convergence_diagnostics(data_jags = data_jags,
anchor = F,
chains = 4,
thining = 10,
burnin = 10000,
iter = 1000000)
mod_res <- run_model(data_jags = data_jags,
params = c("xi", "omega", "delta", "theta"),
anchor = F,
chains = 4,
thining = 10,
burnin = 10000,
iter = 1000000)
cycle_time_est <- extract_time_est(mod_res = mod_res, year = 2018, data_jags = data_jags) %>%
mutate(time_before_elec = time_before_elec + (max(data_jags$week) - max(data_jags$week_adj)))
omega <- extract_omega_est(mod_res = mod_res, year = 2018, data_jags = data_jags)
time_series_with_trend <- ggplot(data=cycle_time_est, aes(x=time_before_elec, y=iter_mean)) +
geom_point(data=polls, aes(x=week, y=twoway, size=sqrt(n_size)), alpha=0.2) +
geom_ribbon(aes(ymin=lower_bound,ymax=upper_bound), alpha = 0.5) +
geom_line(color = "blue",size = 0.75) +
theme_bw() +
scale_x_reverse(name = "Weeks Before Election", limits= c(94, 0)) +
scale_y_continuous(name = "Democratic Two-way Vote Share", labels=scales::percent, limits = c(min(0.48, min(polls$twoway) - 0.01), max(0.6, max(polls$twoway) + 0.01))) +
guides(size=F, color = F) +
geom_hline( aes(yintercept = 0.5), linetype="dashed")
ggsave(filename = "figures/2018_time_series_with_trend.png", plot = time_series_with_trend, width = 8, height = 4, units = "in")
message(paste0("Convergance diagnostics for sample 2018 parameters:"))
print(convergence_2018$gelman)
print(convergence_2018$autocorr)
message(paste0("95% CI for week-to-week movement:"))
scales::percent(round(as.numeric(omega)*1.96,4))
##If the election were held today
mod_csim <- as.mcmc(do.call(rbind, mod_res))
mod_csim <- as.data.frame(mod_csim)
final_param <- paste0("xi[",(length(names(mod_csim))-(1+length(unique(data_jags$pollster))+length(unique(data_jags$univ)))),"]")
final_forecast_posterior <- mod_csim[,final_param]
message(paste0("Current forecast of support:"))
scales::percent(round(mean(final_forecast_posterior),3))
message(paste0("Probability of 50% popular vote today:"))
scales::percent(round(mean(final_forecast_posterior > 0.5),3))
predict_seats <- round((coefs[1,1] + coefs[2,1]*mean(final_forecast_posterior))*435)
message(paste0("Number of seats estimated today:"))
predict_seats
final_seats_posterior <- round((coefs[1,1] + coefs[2,1]*final_forecast_posterior)*435)
message(paste0("Probability of a majority of seats today:"))
scales::percent(round(mean(final_seats_posterior > 217),3))
##Adding in error over time
new_means <- rnorm(100000, mean = mean(final_forecast_posterior), sd = (as.numeric(omega)*min(cycle_time_est$time_before_elec)))
new_seats <- round((coefs[1,1] + coefs[2,1]*new_means)*435)
message(paste0("Probability of 50% popular vote on election day:"))
scales::percent(round(mean(new_means > 0.5),3))
message(paste0("Probability of a majority of seats on election day:"))
scales::percent(round(mean(new_seats > 217),3))
nat_swing <- mean(final_forecast_posterior) -
as.numeric(substr(past_final_est$Popular.Vote[past_final_est$Cycle == 2016],1,4))/100
house_2016$dist_forecast <- house_2016$twoway_vote + nat_swing
house_2016$dist_lb <- house_2016$twoway_vote - 1.96*(as.numeric(omega)*min(cycle_time_est$time_before_elec))
house_2016$dist_ub <- house_2016$twoway_vote + 1.96*(as.numeric(omega)*min(cycle_time_est$time_before_elec))
house_2016$prob_victory <- 0
house_2016$cd <- ""
for (i in 1:nrow(house_2016)) {
dist_mean <- rnorm(100000, mean = house_2016$dist_forecast[i], sd = (as.numeric(omega)*min(cycle_time_est$time_before_elec)))
house_2016$prob_victory[i] <- mean(dist_mean > 0.5)
house_2016$cd[i] <- paste(state.abb[grep(house_2016$state[i], state.name)], strsplit(as.character(house_2016$geo_name[i])," ")[[1]], sep = " - ")
}
house_2016$strat_import <- ifelse(house_2016$prob_victory < 0.6 & house_2016$prob_victory > 0.4, 1, 0)
n_size <- 10000
temp_dists <- data.frame(support = numeric(435), seat = numeric(435))
tipping_point <- data.frame(state = character(n_size), dist = character(n_size), stringsAsFactors=FALSE)
for (i in 1:n_size) {
for (j in 1:nrow(house_2016)) {
temp_dists$state[j] <- paste(house_2016$state[j])
temp_dists$dist[j] <- paste(house_2016$geo_name[j])
temp_dists$support[j] <- rnorm(1, mean = house_2016$dist_forecast[j], sd = (as.numeric(omega)*min(cycle_time_est$time_before_elec)))
}
temp_dists <- temp_dists %>%
arrange(-support)
tipping_point$state[i] <- temp_dists$state[218]
tipping_point$dist[i] <- temp_dists$dist[218]
}
tp_dists <- tipping_point %>%
group_by(state, dist) %>%
summarise(tp_pct = n()/n_size)
house_2016 <- house_2016 %>%
left_join(tp_dists, by  = c("geo_name" = "dist", "state" = "state")) %>%
mutate_each(funs(replace(., which(is.na(.)), 0))) %>%
mutate(win = ifelse(dist_forecast > 0.5, 1, 0),
class = ifelse(prob_victory > 0.8, 1,
ifelse(prob_victory > 0.6, 0.75,
ifelse(prob_victory > 0.4, 0.5,
ifelse(prob_victory > 0.2, 0.25, 0)))),
dist_forecast = ifelse(dist_forecast > 1, 1, dist_forecast))
stat_districts <- house_2016 %>%
filter(strat_import == 1) %>%
mutate(cd = factor(cd, levels = cd[order(prob_victory)]))
seats_df <- data.frame(new_seats = new_seats, new_seats_wins = ifelse(new_seats > 217, 1, 0)) %>%
filter(new_seats < 435, new_seats > 0)
hist1 <- ggplot(house_2016, aes(x = dist_forecast, fill =  factor(win))) +
geom_histogram() +
theme_bw()+
guides(fill= F) +
scale_x_continuous(labels = scales::percent, name = "Forecasted Support") +
ylab("# of Districts")  +
scale_fill_manual(values = c("#A83022", "#3596DD"))
hist2 <- ggplot(house_2016, aes(x = prob_victory, fill =  factor(class))) +
geom_histogram() +
theme_bw()+
guides(fill= F) +
scale_x_continuous(labels = scales::percent, name = "Probability of Victory") +
ylab("# of Districts")  +
scale_fill_manual(values = c("#A83022", "#BC5B51", "#64288C", "#3596DD", "#1F2F6A"))
hist3 <- ggplot(seats_df, aes(x = new_seats, fill =  factor(new_seats_wins))) +
geom_bar(aes(y = (..count..)/sum(..count..))) +
theme_bw()+
guides(fill= F) +
scale_y_continuous(labels = scales::percent, name = "% of Simulations") +
xlab("# of Democratic Seats")  +
scale_fill_manual(values = c("#A83022", "#3596DD"))
ggsave(filename = "figures/2018_histograms_2.png", plot = plot_grid(hist1, hist2 nrow = 1), width = 6, height = 4, units = "in")
ggsave(filename = "figures/2018_histograms_2.png", plot = plot_grid(hist1, hist2, nrow = 1), width = 6, height = 4, units = "in")
plot_grid(hist1, hist2, nrow = 1)
hist3
ggplot(seats_df, aes(x = new_seats, fill =  factor(new_seats_wins))) +
geom_bar(aes(y = (..count..)/sum(..count..))) +
theme_bw()+
guides(fill= F) +
scale_y_continuous(labels = scales::percent, name = "% of Simulations") +
xlab("# of Democratic Seats")  +
scale_fill_manual(values = c("#A83022", "#3596DD"))
setwd("~/src/BSTM/proj")
##all load/prep
pollster_lkup <- read.csv("data/pollster_lkup.csv")
res <- read.csv("data/election_results.csv") %>%
mutate(twoway_vote = dem_vote/(dem_vote+rep_vote),
twoway_seat = dem_seats/(dem_seats+rep_seats)) %>%
arrange(cycle)
two_sigma = 0.2
sigma2 = (two_sigma/1.96)^2
setwd("~/src/BSTM/proj")
library(ggplot2)
library(tidyverse)
library(rjags)
library(cowplot)
library(flextable)
source("forecasting_functions.R")
set.seed(102)
scipen=9
##data load/prep
pollster_lkup <- read.csv("data/pollster_lkup.csv")
res <- read.csv("data/election_results.csv") %>%
mutate(twoway_vote = dem_vote/(dem_vote+rep_vote),
twoway_seat = dem_seats/(dem_seats+rep_seats)) %>%
arrange(cycle)
two_sigma = 0.2
sigma2 = (two_sigma/1.96)^2
deltas <- read.csv("data/final_pollster_bias_ests.csv") %>%
mutate(delta_mu = ifelse(delta_pollster == 'rasmussen', -0.001383929, 0),
delta_sigma2 = ifelse(delta_pollster == "rasmussen", 0, sigma2))
deltas <- read.csv("data/final_pollster_bias_ests.csv") %>%
mutate(delta_mu = ifelse(delta_pollster == 'rasmussen', -0.001383929, 0),
delta_sigma2 = ifelse(delta_pollster == "rasmussen", 0, sigma2))
thetas <- read.csv("data/final_universe_bias_ests.csv") %>%
mutate(delta_mu = ifelse(delta_pollster == 'LV', 0.006656808, 0),
delta_sigma2 = ifelse(delta_pollster == "LV", 0, sigma2))
deltas <- read.csv("data/final_pollster_bias_ests.csv")
View(deltas)
thetas <- read.csv("data/final_universe_bias_ests.csv") %>%
mutate(theta_mu = ifelse(theta_univ == 'LV', 0.006656808, 0),
theta_sigma2 = ifelse(theta_univ == "LV", 0, sigma2))
View(thetas)
##2018
polls <- read.csv("data/past_polls.csv") %>%
mutate(twoway = dem/(dem+rep)) %>%
inner_join(res[,c("cycle","date")], by="cycle") %>%
mutate(week = round(as.numeric((as.Date(as.character(date),  format="%m/%d/%y") -
as.Date(as.character(end_date),  format="%m/%d/%y")) +
(as.Date(as.character(end_date),  format="%m/%d/%y") -
as.Date(as.character(start_date),  format="%m/%d/%y"))/2)/7),
n_size = as.numeric(as.character(n_size)))
data_jags <- data_prep(data = polls, res = res, year = 2018, anchor = F)
data_jags <- bias_priors(data_jags = data_jags, deltas = deltas, thetas = thetas, anchor = F)
mod_res <- run_model(data_jags = data_jags,
params = c("delta", "theta"),
anchor = F,
chains = 4,
thining = 10,
burnin = 10000,
iter = 1000000)
##setup
setwd("~/src/BSTM/proj")
library(ggplot2)
library(tidyverse)
library(rjags)
library(cowplot)
library(flextable)
source("forecasting_functions.R")
set.seed(102)
scipen=9
##data load/prep
pollster_lkup <- read.csv("data/pollster_lkup.csv")
res <- read.csv("data/election_results.csv") %>%
mutate(twoway_vote = dem_vote/(dem_vote+rep_vote),
twoway_seat = dem_seats/(dem_seats+rep_seats)) %>%
arrange(cycle)
two_sigma = 0.2
sigma2 = (two_sigma/1.96)^2
deltas <- read.csv("data/final_pollster_bias_ests.csv") %>%
mutate(delta_mu = ifelse(delta_pollster == 'rasmussen', -0.001383929, 0),
delta_sigma2 = ifelse(delta_pollster == "rasmussen", 0, sigma2))
thetas <- read.csv("data/final_universe_bias_ests.csv") %>%
mutate(theta_mu = ifelse(theta_univ == 'LV', 0.006656808, 0),
theta_sigma2 = ifelse(theta_univ == "LV", 0, sigma2))
polls <- read.csv("data/2018_polling.csv") %>%
filter(pollster %in% pollster_lkup$pollster) %>%
mutate(twoway = dem/(dem+rep)) %>%
mutate(week = round(as.numeric((as.Date(as.character("11/6/18"),  format="%m/%d/%y") -
as.Date(as.character(end_date),  format="%m/%d/%y")) +
(as.Date(as.character(end_date),  format="%m/%d/%y") -
as.Date(as.character(start_date),  format="%m/%d/%y"))/2)/7),
n_size = as.numeric(as.character(n_size)))
data_jags <- data_prep(data = polls, res = res, year = 2018, anchor = F)
data_jags <- bias_priors(data_jags = data_jags, deltas = deltas, thetas = thetas, anchor = F)
mod_res <- run_model(data_jags = data_jags,
params = c("delta", "theta"),
anchor = F,
chains = 4,
thining = 10,
burnin = 10000,
iter = 1000000)
prior_ests_18 <- calculate_priors(mod_res = mod_res, year = 2018, data_jags = data_jags)
##2016
polls <- read.csv("data/past_polls.csv") %>%
mutate(twoway = dem/(dem+rep)) %>%
inner_join(res[,c("cycle","date")], by="cycle") %>%
mutate(week = round(as.numeric((as.Date(as.character(date),  format="%m/%d/%y") -
as.Date(as.character(end_date),  format="%m/%d/%y")) +
(as.Date(as.character(end_date),  format="%m/%d/%y") -
as.Date(as.character(start_date),  format="%m/%d/%y"))/2)/7),
n_size = as.numeric(as.character(n_size)))
data_jags <- data_prep(data = polls, res = res, year = 2016, anchor = F)
data_jags <- bias_priors(data_jags = data_jags, deltas = deltas, thetas = thetas, anchor = F)
mod_res <- run_model(data_jags = data_jags,
params = c("delta", "theta"),
anchor = F,
chains = 4,
thining = 10,
burnin = 10000,
iter = 1000000)
prior_ests_16 <- calculate_priors(mod_res = mod_res, year = 2016, data_jags = data_jags)
View(prior_ests_18$deltas_est)
names(prior_ests_18$deltas_est)
names(prior_ests_18$deltas_est) <- c("delta_cycle_18", "delta_pollster", "delta_mu_18", "delta_sigma2_18" )
names(prior_ests_16$deltas_est) <- c("delta_cycle_16", "delta_pollster", "delta_mu_16", "delta_sigma2_16" )
deltas <- prior_ests_18$deltas_est %>% inner_join(prior_ests_16$deltas_est)
View(deltas)
deltas <- prior_ests_18$deltas_est %>% inner_join(prior_ests_16$deltas_est) %>% filter(!is.na(delta_mu_16))
View(deltas)
cor(deltas$delta_mu_16, deltas$delta_mu_18)
deltas_test <- prior_ests_18$deltas_est %>% inner_join(prior_ests_16$deltas_est) %>%
filter(!is.na(delta_mu_16), ! delta_pollster %in% c("rasmussen", "economist_yougov", "quinnipiac"))
cor(deltas_test$delta_mu_16, deltas_test$delta_mu_18)
prior_ests_18$thetas_est
prior_ests_16$thetas_est
cor(c(0.029250021, 0.011702034), c(0.003056874, 0.011089332))
twentysixteen <- read.csv("data/all_pollster_bias_ests.csv")
twentysixteen <- twentysixteen %>% filter(cycle == 2016)
View(twentysixteen)
twentysixteen <- twentysixteen %>% filter(delta_cycle == 2016)
View(twentysixteen)
names(twentysixteen) <- c("delta_cycle_16", "delta_pollster", "delta_mu_16", "delta_sigma2_16" "pollster_raw_16")
names(twentysixteen) <- c("delta_cycle_16", "delta_pollster", "delta_mu_16", "delta_sigma2_16", "pollster_raw_16")
deltas_again <- prior_ests_18$deltas_est %>% inner_join(twentysixteen) %>% filter(!is.na(delta_mu_16))
View(deltas_again)
cor(deltas_again$delta_mu_18, deltas_again$delta_mu_16)
